import os
from nellie.im_info.verifier import FileInfo, ImInfo
from nellie.segmentation.filtering import Filter
from nellie.segmentation.labelling import Label
from nellie.segmentation.mocap_marking import Markers
from nellie.segmentation.networking import Network
from nellie.tracking.hu_tracking import HuMomentTracking
from nellie.tracking.voxel_reassignment import VoxelReassigner
from nellie.feature_extraction.hierarchical import Hierarchy

# List of directories to process
directories = [
    r"I:\nellie_test_r1\day1\channel_0",
    r"I:\nellie_test_r1\day3\channel_0",
    r"I:\nellie_test_r2\day1\channel_0",
    r"I:\nellie_test_r2\day3\channel_0",
    r"I:\nellie_test_r3\day1\channel_0",
    r"I:\nellie_test_r3\day3\channel_0"
]

# Function to process a single file
def process_file(file_path):
    print(f"Entered process_file for: {file_path}")

    print("Creating FileInfo")
    file_info = FileInfo(file_path)

    print("Finding metadata")
    file_info.find_metadata()

    print("Loading metadata")
    file_info.load_metadata()

    print("Creating ImInfo")
    im_info = ImInfo(file_info)

    print("Running Filter")
    Filter(im_info).run()

    print("Running Label")
    Label(im_info).run()

    print("Running Network")
    Network(im_info).run()

    print("Running Markers")
    Markers(im_info).run()

    print("Running HuMomentTracking")
    HuMomentTracking(im_info).run()

    print("Running VoxelReassigner")
    VoxelReassigner(im_info).run()

    print("Running Hierarchy")
    Hierarchy(im_info).run()

    print(f"Finished processing: {file_path}")
    return im_info

# Process files in each directory
for directory in directories:
    print(f"\nProcessing directory: {directory}")

    # Get all .ome.tiff files in the directory
    all_files = os.listdir(directory)
    files_to_process = [f for f in all_files if f.endswith('.ome.tiff')]

    print(f"Number of files found: {len(files_to_process)}")

    # Process files one by one
    for file in files_to_process:
        file_path = os.path.join(directory, file)
        print(f"\nAttempting to process: {file_path}")
        try:
            im_info = process_file(file_path)
            print(f"Successfully processed: {file_path}")
            # Here you can add code to display the result in Napari
            # For example:
            # viewer.add_image(im_info.im, name=file)
        except Exception as e:
            print(f"Error processing {file}: {str(e)}")
        print("---")

print("All directories processed")
